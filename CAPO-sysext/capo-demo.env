#!/bin/bash

CLUSTER_NAME="flatcar-capi-demo-openstack"
export CLUSTER_NAME

WORKER_CONTROLPLANE_NODES=1
WORKER_NODES=2

p() {
    echo
    echo "#####################################"
    echo "${@}"
    echo "-------------------------------------"
}
# --

check_command() {
    local cmd="$1"

    if ! command -v "$cmd" &> /dev/null ; then
        echo "'$cmd' could not be found. Please install your distro's '$cmd'."
        return 1
    fi
    echo "  - '$cmd'"
}
# --

check_file() {
    local f="$1"

    if [ ! -f "./$f" ] ; then
        echo "prerequisite '$f' could not be found."
        return 1
    fi

    echo "  - '$f'"
}
# --

get_prerequisites() {
    p "Prerequisites: Checking for required host commands."
    check_command "kubectl" || return
    check_command "yq" || return
    check_command "git" || return
    check_command "wget" || return
    check_command "sshuttle" || return

    p "Prerequisites: Checking for prerequisite files."
    check_file "clouds.yaml" || return
    check_file "openstack.env" || return

    if [ ! -f ./clusterctl ] ; then
        p "Prerequisites: fetching clusterctl"
        wget https://github.com/kubernetes-sigs/cluster-api/releases/latest/download/clusterctl-linux-amd64
        mv clusterctl-linux-amd64 clusterctl
        chmod 755 clusterctl
    fi

    if [ ! -f ./kind ] ; then
        p "Prerequisites: fetching kind"
        wget https://github.com/kubernetes-sigs/kind/releases/latest/download/kind-linux-amd64
        mv kind-linux-amd64 kind
        chmod 755 kind
    fi

    if [ ! -d CAPO ] ; then
        p "Prerequisites: fetching CAPO repo"
        git clone --depth 1 \
            https://github.com/kubernetes-sigs/cluster-api-provider-openstack \
            CAPO
    fi
}
# --

setup_kind_cluster() {
    p "Bootsstrapping cluster"
    ./kind create cluster --kubeconfig=./kind-mgmt.kubeconfig
    export EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION=true

    p "Initialising Clustercuddle"
    ./clusterctl init --infrastructure openstack \
        --kubeconfig=./kind-mgmt.kubeconfig
}
# --

kc_mgmt() {
    kubectl --kubeconfig=./kind-mgmt.kubeconfig "${@}"

}
# --

kc_worker() {
    kubectl --kubeconfig=./${CLUSTER_NAME}.kubeconfig "${@}"
}
# --

generate_capo_yaml() {
    source ./CAPO/templates/env.rc ./clouds.yaml openstack
    source ./openstack.env

    p "Generating ${CLUSTER_NAME}.yaml."
    ./clusterctl generate cluster ${CLUSTER_NAME} \
        --kubeconfig=./kind-mgmt.kubeconfig \
        --flavor flatcar-sysext --kubernetes-version v1.30.3 \
        --control-plane-machine-count=${WORKER_CONTROLPLANE_NODES} \
        --worker-machine-count=${WORKER_NODES} \
        > ${CLUSTER_NAME}.yaml

    p "Adding SSH via kustomize ssh.yaml."
    cat > ssh.yaml <<EOF
---
# Allow the SSH access for demo purposes.
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OpenStackMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  template:
    spec:
      securityGroups:
        - filter:
            name: ssh
EOF
cat > kustomization.yaml <<EOF
resources:
- ${CLUSTER_NAME}.yaml

patches:
- path: ssh.yaml
  target:
    kind: OpenStackMachineTemplate
EOF
    kc_mgmt kustomize  ./ --output ${CLUSTER_NAME}.yaml 
}
# --

deploy_capo_cluster() {

    p "PLEASE START SSHUTTLE NOW. Press return to continue."
    read ignored

    p "Creating workload cluster"
    kc_mgmt apply -f ./${CLUSTER_NAME}.yaml

    p "Waiting for cluster to be provisioned."
    while ! kc_mgmt get cluster | grep flatcar-capi-demo-openstack | grep Provisioned ; do
        sleep 1
    done

    # Hack alert: sometimes ended up with an empty kubeconfig from the command below, so
    #   we add a defensive sleep.
    sleep 2

    ./clusterctl get kubeconfig ${CLUSTER_NAME} \
            --kubeconfig=./kind-mgmt.kubeconfig \
            --namespace default \
            > ./${CLUSTER_NAME}.kubeconfig

    p "Waiting for all nodes to come up."
    local count=0
    local target_count=$((WORKER_CONTROLPLANE_NODES + WORKER_NODES))
    while [ "$count" -lt "$target_count" ] ; do
        count="$(kc_worker --request-timeout=1s get nodes \
                 | grep flatcar-capi-demo-openstack \
                 | wc -l)"
        echo "$count of $target_count nodes are up."
    done

    p "Deploying Calico so we can talk to the worker nodes"
    kc_worker apply \
        -f https://docs.projectcalico.org/archive/v3.23/manifests/calico.yaml

    p "Creating OpenStack cloud secret"
    CAPO/templates/create_cloud_conf.sh ./clouds.yaml openstack \
        > ./cloud.conf
    kc_worker create secret \
        -n kube-system generic cloud-config --from-file=./cloud.conf

    p "Deploying OpenStack controllers to worker cluster"
    kc_worker apply \
        -f https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/controller-manager/cloud-controller-manager-roles.yaml
    kc_worker apply \
        -f https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/controller-manager/cloud-controller-manager-role-bindings.yaml
    kc_worker apply \
        -f https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/master/manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml

    p "Cluster is deployed and can now be used ('kc_worker' kubectl wrapper)."
}
# --

cleanup() {
    kc_mgmt delete cluster ${CLUSTER_NAME}
    ./kind delete cluster --kubeconfig=./kind-mgmt.kubeconfig
}
# --

help() {
    cat <<EOF
Demo functions:

 - get_prerequisites:   Check and download a number of prerequisited.
 - setup_kind_cluster:  Create a local Kind (Kubernetes-in-docker) cluster we'll use as management cluster.
 - generate_capo_yaml:  Generate OpenStack worker cluster configuration.
 - deploy_capo_cluster: Apply worker cluster config to management cluster. This will create the worker cluster.

You can use kubectl wrappers:
 - kc_worker: interact with the worker cluster
 - kc_mgmt: interact with the management cluster.

 - 'cleanup' will tear down the worker cluster and remove the local management cluster.
EOF
}

help
